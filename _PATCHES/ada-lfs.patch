Allow Ada to build for older versions of the MSVCRT without a stat64 equivalent

From: J.M. Eubank <john@thesnappy.net>

# HG changeset patch
# Parent  3078cbaa542655f5b39e8081774150f5f0d3a7ba
---
 0 files changed

diff --git a/gcc/ada/adaint.c b/gcc/ada/adaint.c
index 4a75b5909..2093067e0 100644
--- a/gcc/ada/adaint.c
+++ b/gcc/ada/adaint.c
@@ -1363,7 +1363,7 @@ win32_filetime (HANDLE h)
 
 /* As above but starting from a FILETIME.  */
 static void
-f2t (const FILETIME *ft, __time64_t *t)
+f2t (const FILETIME *ft, GNAT_TIME_T *t)
 {
   union
   {
@@ -1372,7 +1372,7 @@ f2t (const FILETIME *ft, __time64_t *t)
   } t_write;
 
   t_write.ft_time = *ft;
-  *t = (__time64_t) (t_write.ull_time / 10000000ULL - w32_epoch_offset);
+  *t = (GNAT_TIME_T) (t_write.ull_time / 10000000ULL - w32_epoch_offset);
 }
 #endif
 
@@ -1385,7 +1385,7 @@ __gnat_file_time_name_attr (char* name, struct file_attributes* attr)
 #if defined (_WIN32)
       BOOL res;
       WIN32_FILE_ATTRIBUTE_DATA fad;
-      __time64_t ret = -1;
+      GNAT_TIME_T ret = -1;
       TCHAR wname[GNAT_MAX_PATH_LEN];
       S2WSC (wname, name, GNAT_MAX_PATH_LEN);
 
diff --git a/gcc/ada/adaint.h b/gcc/ada/adaint.h
index 2ae876699..31459f334 100644
--- a/gcc/ada/adaint.h
+++ b/gcc/ada/adaint.h
@@ -59,13 +59,23 @@ extern "C" {
 #define GNAT_LSTAT lstat64
 #define GNAT_STRUCT_STAT struct stat64
 
-#elif defined(_WIN32)
+#elif defined(_WIN64)
 #define GNAT_FOPEN fopen64
 #define GNAT_OPEN open
 #define GNAT_STAT stat64
 #define GNAT_FSTAT fstat64
 #define GNAT_LSTAT lstat
 #define GNAT_STRUCT_STAT struct stat64
+#define GNAT_TIME_T __time64_t
+
+#elif defined(_WIN32)
+#define GNAT_FOPEN fopen64
+#define GNAT_OPEN open
+#define GNAT_STAT _stati64
+#define GNAT_FSTAT _fstati64
+#define GNAT_LSTAT _stati64
+#define GNAT_STRUCT_STAT struct _stati64
+#define GNAT_TIME_T time_t
 
 #elif defined(__APPLE__)
 
diff --git a/gcc/ada/cstreams.c b/gcc/ada/cstreams.c
index e37070ddb..05e302682 100644
--- a/gcc/ada/cstreams.c
+++ b/gcc/ada/cstreams.c
@@ -256,7 +256,7 @@ __gnat_full_name (char *nam, char *buffer)
   return buffer;
 }
 
-#ifdef _WIN32
+#ifdef _WIN64
   /* On Windows we want to use the fseek/fteel supporting large files. This
      issue is due to the fact that a long on Win64 is still a 32 bits value */
 __int64
